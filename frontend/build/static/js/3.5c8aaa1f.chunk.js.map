{"version":3,"file":"static/js/3.5c8aaa1f.chunk.js","mappings":"uNA+BA,QA7BA,SAA6BA,GAAY,IAAX,KAAEC,GAAMD,EAElC,OACIE,EAAAA,EAAAA,KAACC,EAAAA,EAAmB,CAAAC,UAEhBC,EAAAA,EAAAA,MAACC,EAAAA,EAAS,CACNC,MAAO,IACPC,OAAQ,IACRP,KAAMA,EACNQ,OAAQ,CACJC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IACVT,SAAA,EAEFF,EAAAA,EAAAA,KAACY,EAAAA,EAAa,CAACC,gBAAgB,SAC/Bb,EAAAA,EAAAA,KAACc,EAAAA,EAAK,CAACC,QAAQ,YAAYC,SAAS,UACpChB,EAAAA,EAAAA,KAACiB,EAAAA,EAAK,KACNjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAO,KACRlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAM,KACPnB,EAAAA,EAAAA,KAACoB,EAAAA,EAAI,CAACC,KAAK,WAAWN,QAAQ,eAAeO,KAAK,UAAUC,OAAO,UAAUC,UAAW,CAAEC,EAAG,MAC7FzB,EAAAA,EAAAA,KAACoB,EAAAA,EAAI,CAACC,KAAK,WAAWN,QAAQ,cAAcO,KAAK,SAASC,OAAO,gBAKjF,E,sDCaA,QAtCA,SAAmCG,GAC/B,MAAO3B,EAAM4B,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IAE3CK,EAAAA,EAAAA,YAAU,KACUC,iBACkBC,EAAAA,EAAYC,kBAAkBC,EAAAA,EAAYC,iBAAiBC,OAAOC,MAC3FC,IACgC,YAAzBA,EAAS1C,KAAK2C,QACdC,EAAaF,EAAS1C,KAAK0C,SAC/B,IAEHG,IACGd,GAAW,EAAK,IAGxBE,GAAa,EAAM,EAGvBa,EAAS,GACV,CAACnB,IAEJ,MAAMiB,EAAgBG,IAClB,MAAMC,EAAYrB,EAAOsB,KAAIlD,IAAwB,IAAvB,GAAEmD,EAAE,UAAEC,GAAWpD,EAC3C,MAAMqD,EAAYL,EAAYM,MAAMC,GAAMA,EAAEC,QAAUL,IACtD,MAAO,CACHA,KAAIC,YACJK,YAAaJ,EAAYA,EAAUK,aAAe,EAClDC,aAAcN,EAAYA,EAAUO,cAAgB,EACvD,IAEL/B,EAAQoB,EAAU,EAGtB,MAAO,CAAChD,EAAMgC,EAAWF,EAC7B,E,kCChBA,QAhBA,WACI,MAAMH,EAiBV,WACI,MAAMA,EAAS,GACTiC,EAAe,IAAIC,KAEzB,IAAK,IAAIC,EAAI,GAAIA,GAAK,EAAGA,IAAK,CAC1B,MAAMC,EAAO,IAAIF,KAAKD,EAAaI,cAAeJ,EAAaK,WAAaH,EAAG,GAC/EnC,EAAOuC,KAAK,CACRhB,GAAIa,EAAKE,WAAa,EACtBE,KAAMJ,EAAKC,cACXb,UAAWY,EAAKK,eAAe,QAAS,CAAEb,MAAO,UAEzD,CAEA,OAAO5B,CACX,CA/BmB0C,IACRrE,EAAMgC,EAAWF,GAAWwC,EAA0B3C,GAE7D,OACIvB,EAAAA,EAAAA,MAACmE,EAAAA,EAAS,CAACC,YAAa,EAAErE,SAAA,EACtBF,EAAAA,EAAAA,KAACwE,EAAAA,EAAM,CAACC,MAAM,gBACdzE,EAAAA,EAAAA,KAAC0E,EAAAA,GAAO,IACN3C,IAAc/B,EAAAA,EAAAA,KAAC2E,EAAAA,EAAO,IACtB9C,GAAY+C,EAAAA,GAAMhC,MAAM,iDACxBf,IAAY7B,EAAAA,EAAAA,KAAC6E,EAAAA,EAAI,CAACC,KAAK,oBACtBjD,IAAY7B,EAAAA,EAAAA,KAAC+E,EAAoB,CAAChF,KAAMA,MAGvD,C","sources":["components/userDashboard/incomeVsExpenseChart.js","hooks/useExpenseVsIncomeSummary.js","pages/user/statistics.js"],"sourcesContent":["import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\nfunction IncomeVsExpenseChart({ data }) {\r\n\r\n    return (\r\n        <ResponsiveContainer>\r\n\r\n            <LineChart\r\n                width={500}\r\n                height={300}\r\n                data={data}\r\n                margin={{\r\n                    top: 20,\r\n                    right: 20,\r\n                    left: 20,\r\n                    bottom: 10,\r\n                }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis dataKey=\"monthName\" fontSize='10px' />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line type=\"monotone\" dataKey=\"totalExpense\" name='Expense' stroke=\"#ff0000\" activeDot={{ r: 5 }} />\r\n                <Line type=\"monotone\" dataKey=\"totalIncome\" name='Income' stroke=\"#6aa412\" />\r\n            </LineChart>\r\n\r\n        </ResponsiveContainer>\r\n    )\r\n}\r\n\r\nexport default IncomeVsExpenseChart;","import { useEffect, useState } from \"react\";\r\nimport UserService from \"../services/userService\";\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nfunction useExpenseVsIncomeSummary(months) {\r\n    const [data, setData] = useState([]);\r\n    const [isError, setIsError] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            const income_response = await UserService.getMonthlySummary(AuthService.getCurrentUser().email).then(\r\n                (response) => {\r\n                    if (response.data.status === \"SUCCESS\") {\r\n                        generateData(response.data.response)\r\n                    }\r\n                },\r\n                (error) => {\r\n                    setIsError(true)\r\n                }\r\n            )\r\n            setIsLoading(false)\r\n        }\r\n\r\n        getData()\r\n    }, [months])\r\n\r\n    const generateData = (fetchedData) => {\r\n        const finalData = months.map(({ id, monthName }) => {\r\n            const monthData = fetchedData.find((t) => t.month === id)\r\n            return {\r\n                id, monthName,\r\n                totalIncome: monthData ? monthData.total_income : 0,\r\n                totalExpense: monthData ? monthData.total_expense : 0\r\n            }\r\n        })\r\n        setData(finalData)\r\n    }\r\n\r\n    return [data, isLoading, isError]\r\n}\r\n\r\nexport default useExpenseVsIncomeSummary;","import IncomeVsExpenseChart from \"../../components/userDashboard/incomeVsExpenseChart\";\r\nimport Header from \"../../components/utils/header\";\r\nimport Loading from '../../components/utils/loading';\r\nimport useExpenseVsIncomeSummary from '../../hooks/useExpenseVsIncomeSummary';\r\nimport Info from \"../../components/utils/Info\";\r\nimport Container from \"../../components/utils/Container\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nfunction UserStatistics() {\r\n    const months = getMonths()\r\n    const [data, isLoading, isError] = useExpenseVsIncomeSummary(months)\r\n\r\n    return (\r\n        <Container activeNavId={9}>\r\n            <Header title=\"Statistics\" />\r\n            <Toaster/>\r\n            {(isLoading) && <Loading />}\r\n            {(isError) && toast.error(\"Failed to fetch information. Try again later!\") }\r\n            {(isError) && <Info text=\"No data found!\" />}\r\n            {(!isError) && <IncomeVsExpenseChart data={data} />}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default UserStatistics;\r\n\r\nfunction getMonths() {\r\n    const months = []\r\n    const current_date = new Date()\r\n\r\n    for (let i = 11; i >= 0; i--) {\r\n        const date = new Date(current_date.getFullYear(), current_date.getMonth() - i, 1)\r\n        months.push({\r\n            id: date.getMonth() + 1,\r\n            year: date.getFullYear(),\r\n            monthName: date.toLocaleString('en-US', { month: 'long' })\r\n        })\r\n    }\r\n\r\n    return months\r\n}"],"names":["_ref","data","_jsx","ResponsiveContainer","children","_jsxs","LineChart","width","height","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","fontSize","YAxis","Tooltip","Legend","Line","type","name","stroke","activeDot","r","months","setData","useState","isError","setIsError","isLoading","setIsLoading","useEffect","async","UserService","getMonthlySummary","AuthService","getCurrentUser","email","then","response","status","generateData","error","getData","fetchedData","finalData","map","id","monthName","monthData","find","t","month","totalIncome","total_income","totalExpense","total_expense","current_date","Date","i","date","getFullYear","getMonth","push","year","toLocaleString","getMonths","useExpenseVsIncomeSummary","Container","activeNavId","Header","title","Toaster","Loading","toast","Info","text","IncomeVsExpenseChart"],"sourceRoot":""}