{"version":3,"file":"static/js/222.ee521c94.chunk.js","mappings":"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","sources":["pages/admin/editCategory.js","services/adminService.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport Header from \"../../components/utils/header\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport AdminService from \"../../services/adminService\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport Container from \"../../components/utils/Container\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nfunction EditCategory() {\r\n    const { categoryId } = useParams();\r\n    const { register, handleSubmit, reset, formState } = useForm();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const category = JSON.parse(localStorage.getItem('categoryToEdit'));\r\n\r\n        if (category.categoryId == categoryId) {\r\n\r\n            reset({\r\n                cname: category.categoryName,\r\n                type: String(category.transactionType.transactionTypeId)\r\n            })\r\n        } else {\r\n            toast.error(\"Faild to fetch category information!\")\r\n        }\r\n        localStorage.removeItem('categoryToEdit')\r\n    }, [reset, categoryId])\r\n\r\n    const onSubmit = async (data) => {\r\n        setIsLoading(true)\r\n        await AdminService.updatecategory(categoryId, data.cname, data.type).then(\r\n            (response) => {\r\n                if (response.data.status === 'SUCCESS') {\r\n                    navigate('/admin/categories')\r\n                }\r\n            },\r\n            (error) => {\r\n                error.response ?\r\n                    toast.error(\"Failed to update category: Try again later!\")\r\n                    :\r\n                    toast.error(\"Failed to update category: Try again later!\")\r\n            }\r\n        )\r\n        setIsLoading(false)\r\n    }\r\n\r\n    return (\r\n        <Container activeNavId={6}>\r\n            <Header title=\"Edit category\" />\r\n            <Toaster/>\r\n            <form className=\"auth-form t-form\" onSubmit={handleSubmit(onSubmit)} style={{ marginTop: '25px' }}>\r\n                <div className='input-box'>\r\n                    <label>Category name</label><br />\r\n                    <input\r\n                        type='text'\r\n                        {...register('cname', {\r\n                            required: \"Category name is required!\",\r\n                            maxLength: {\r\n                                value: 30,\r\n                                message: \"Category name can have atmost 30 characters!\"\r\n                            }\r\n                        })}\r\n                    />\r\n                    {formState.errors.cname && <small>{formState.errors.cname.message}</small>}\r\n                </div>\r\n\r\n                <div className='input-box'>\r\n                    <label>Transaction type</label><br />\r\n                    <div className='radio'>\r\n                        <span>\r\n                            <label>\r\n                                <input\r\n                                    type='radio'\r\n                                    id={1}\r\n                                    value={1}\r\n                                    {...register('type', {\r\n                                        required: \"Transaction type is required!\"\r\n                                    })}\r\n                                />\r\n                                Expense\r\n                            </label>\r\n                        </span>\r\n                        <span>\r\n                            <label>\r\n                                <input\r\n                                    type='radio'\r\n                                    id={2}\r\n                                    value={2}\r\n                                    {...register('type', {\r\n                                        required: \"Transaction type is required!\"\r\n                                    })}\r\n                                />\r\n                                Income\r\n                            </label>\r\n                        </span>\r\n                    </div>\r\n                    {formState.errors.type && <small>{formState.errors.type.message}</small>}\r\n                </div>\r\n\r\n                <div className='input-box'>\r\n                    <input\r\n                        type='submit'\r\n                        value={isLoading ? \"Saving...\" : 'Save category'}\r\n                        className={isLoading ? \"button button-fill loading\" : \"button button-fill\"}\r\n                    />\r\n                    <Link\r\n                        to='/admin/categories'\r\n                        className='button outline'>\r\n                        <span>Cancel</span>\r\n                    </Link>\r\n                </div>\r\n            </form>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default EditCategory;","import axios from \"axios\";\r\nimport AuthService from \"./auth.service\";\r\nimport API_BASE_URL from \"./auth.config\";\r\n\r\nconst getAllTransactions = (pagenumber, pageSize, searchKey) => {\r\n    return axios.get(\r\n        API_BASE_URL + \"/transaction/getAll\",\r\n        {\r\n            headers: AuthService.authHeader(),\r\n            params: {\r\n                pageNumber: pagenumber,\r\n                pageSize: pageSize,\r\n                searchKey: searchKey\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst getAllUsers = (pagenumber, pageSize, searchKey) => {\r\n    return axios.get(\r\n        API_BASE_URL + \"/user/getAll\",\r\n        {\r\n            headers: AuthService.authHeader(),\r\n            params: {\r\n                pageNumber: pagenumber,\r\n                pageSize: pageSize,\r\n                searchKey: searchKey\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst disableOrEnableUser = (userId) => {\r\n    return axios.delete(\r\n        API_BASE_URL + \"/user/disable\",\r\n        {\r\n            headers: AuthService.authHeader(),\r\n            params: {\r\n                userId: userId\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst getAllcategories = () => {\r\n    return axios.get(\r\n        API_BASE_URL + '/category/getAll', \r\n        {\r\n            headers: AuthService.authHeader()\r\n        }\r\n    )\r\n}\r\n\r\nconst addNewcategory = (categoryName, transactionTypeId) => {\r\n    return axios.post(\r\n        API_BASE_URL + '/category/new', \r\n        {\r\n            categoryName: categoryName,\r\n            transactionTypeId: transactionTypeId\r\n        },\r\n        {\r\n            headers: AuthService.authHeader()\r\n        }\r\n    )\r\n}\r\n\r\nconst updatecategory = (categoryId, categoryName, transactionTypeId) => {\r\n    return axios.put(\r\n        API_BASE_URL + '/category/update', \r\n        {\r\n            categoryName: categoryName,\r\n            transactionTypeId: transactionTypeId\r\n        },\r\n        {\r\n            headers: AuthService.authHeader(),\r\n            params: {\r\n                categoryId: categoryId\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst disableOrEnableCategory = (categoryId) => {\r\n    return axios.delete(\r\n        API_BASE_URL + \"/category/delete\",\r\n        {\r\n            headers: AuthService.authHeader(),\r\n            params: {\r\n                categoryId: categoryId\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst AdminService = {\r\n    getAllTransactions,\r\n    getAllUsers,\r\n    disableOrEnableUser,\r\n    getAllcategories,\r\n    addNewcategory,\r\n    updatecategory,\r\n    disableOrEnableCategory,\r\n}\r\n\r\nexport default AdminService;"],"names":["categoryId","useParams","register","handleSubmit","reset","formState","useForm","isLoading","setIsLoading","useState","navigate","useNavigate","useEffect","category","JSON","parse","localStorage","getItem","cname","categoryName","type","String","transactionType","transactionTypeId","toast","error","removeItem","_jsxs","Container","activeNavId","children","_jsx","Header","title","Toaster","className","onSubmit","async","AdminService","updatecategory","data","then","response","status","style","marginTop","required","maxLength","value","message","errors","id","Link","to","getAllTransactions","pagenumber","pageSize","searchKey","axios","get","API_BASE_URL","headers","AuthService","authHeader","params","pageNumber","getAllUsers","disableOrEnableUser","userId","delete","getAllcategories","addNewcategory","post","put","disableOrEnableCategory"],"sourceRoot":""}