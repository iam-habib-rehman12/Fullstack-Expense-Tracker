{"version":3,"file":"static/js/90.aa497edc.chunk.js","mappings":"iLAmHA,QA9GA,WAEI,MAAMA,GAAWC,EAAAA,EAAAA,OAEX,MAAEC,IAAUC,EAAAA,EAAAA,OAEZ,SAACC,EAAQ,aAAEC,EAAY,UAAEC,IAAaC,EAAAA,EAAAA,OAErCC,EAAgBC,IAAoBC,EAAAA,EAAAA,UAAS,KAC7CC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,GAwD3C,OACIK,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UAClBC,EAAAA,EAAAA,MAAA,QAAMF,UAAU,YAAaG,SAAUd,GAxDlCe,UACbR,GAAa,SACUS,EAAAA,EAAYC,yBAAyBC,EAAKC,MAAMC,MAClEC,IACGC,QAAQC,IAAIF,EAASH,KAAKM,SACG,YAAzBH,EAASH,KAAKO,QACdrB,EAAiB,IACjBT,EAAS,sCAAD+B,OAAuC7B,KAE/CO,EAAiB,6CACrB,IAEHuB,IACG,GAAIA,EAAMN,SAAU,CAChB,MAAMO,EAAaD,EAAMN,SAASH,KAAKG,SACvCjB,EAAiBwB,GACjBN,QAAQC,IAAIK,EAChB,MACIN,QAAQC,IAAII,EAAMH,SAClBpB,EAAiB,6CACrB,IAGRG,GAAa,EAAM,IAiCmDK,SAAA,EAC9DF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,uBAAsBF,EAAAA,EAAAA,KAAA,SAGtBF,GACIK,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,CAAC,oBAAkBf,EAAM,SACzB,KAAjBM,GACDU,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,CAAC,2CAAuCF,EAAAA,EAAAA,KAAA,QAAMmB,MAAO,CAACC,WAAW,IAAMC,MAAM,SAASnB,SAAEf,IAAa,QACzHa,EAAAA,EAAAA,KAAAsB,EAAAA,SAAA,IAIY,KAAjB7B,IAAwBO,EAAAA,EAAAA,KAAA,KAAAE,SAAIT,KAGjCU,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,SACAuB,YAAY,0BACRC,KAAK,UACDnC,EAAS,OAAQ,CACjBoC,SAAU,wBAGjBlC,EAAUmC,OAAOjB,OAAQT,EAAAA,EAAAA,KAAA,SAAAE,SAAQX,EAAUmC,OAAOjB,KAAKK,cAG5Dd,EAAAA,EAAAA,KAAA,OAAKC,UAAU,MAAMkB,MAAO,CAACC,WAAY,IAAKO,UAAW,UAAUzB,SAAC,+EACpEF,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBF,EAAAA,EAAAA,KAAA,SAAOwB,KAAK,SAASI,MAAOhC,EAAY,YAAc,SACrDK,UAAWL,EAAY,6BAA+B,0BAI3DI,EAAAA,EAAAA,KAAA,UACAG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,CAAC,qBAAiBF,EAAAA,EAAAA,KAAA,QAAMmB,MAAO,CAACU,OAAQ,WAAYC,QAlEjEzB,UACfX,EAAiB,IACjBK,GAAa,SACUO,EAAAA,EAAYyB,oCAAoC5C,GAAOuB,MACzEC,IACGC,QAAQC,IAAIF,EAASH,MACQ,YAAzBG,EAASH,KAAKO,QACdH,QAAQC,IAAIF,EAASH,MACrBd,EAAiB,KAEjBA,EAAiB,4CACrB,IAGHuB,IACG,GAAIA,EAAMN,SAAU,CAChB,MAAMO,EAAaD,EAAMN,SAASH,KAAKG,SACvCjB,EAAiBwB,GACjBN,QAAQC,IAAII,EAChB,MACIL,QAAQC,IAAII,GACZvB,EAAiB,4CACrB,IAGRK,GAAa,EAAM,EAyCkFE,UAAU,cAAaC,SAAEN,EAAY,eAAiB,uBAInK,C","sources":["pages/auth/forgotpassword/forgotPasswordCodeVerification.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport {useForm} from 'react-hook-form';\r\nimport AuthService from '../../../services/auth.service';\r\n\r\nfunction ForgotPasswordCodeVerification() {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const { email } = useParams(); \r\n\r\n    const {register, handleSubmit, formState} = useForm();\r\n\r\n    const [response_error, setResponseError] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isSending, setIsSending] = useState(false);\r\n\r\n    const onSubmit = async (data) => {\r\n        setIsLoading(true)        \r\n        const response = await AuthService.forgotPasswordverifyCode(data.code).then(\r\n            (response) => {\r\n                console.log(response.data.message);\r\n                if (response.data.status === 'SUCCESS') {\r\n                    setResponseError(\"\")\r\n                    navigate(`/auth/forgotPassword/resetPassword/${email}`);\r\n                } else {\r\n                    setResponseError('Verification failed: Something went wrong!');\r\n                }\r\n            },\r\n            (error) => {\r\n                if (error.response) {\r\n                    const resMessage = error.response.data.response;\r\n                    setResponseError(resMessage);\r\n                    console.log(resMessage);\r\n                }else {\r\n                    console.log(error.message);\r\n                    setResponseError(\"Verification failed: Something went wrong!\")\r\n                }\r\n            }\r\n          );\r\n        setIsLoading(false);\r\n    }\r\n\r\n    const resendCode = async() =>{\r\n        setResponseError(\"\")\r\n        setIsSending(true)        \r\n        const response = await AuthService.resendResetPasswordVerificationCode(email).then(\r\n            (response) => {\r\n                console.log(response.data);\r\n                if (response.data.status === \"SUCCESS\") {\r\n                    console.log(response.data);\r\n                    setResponseError(\"\");\r\n                }else {\r\n                    setResponseError(\"Verification failed: Cannot resend email!\")\r\n                }\r\n                \r\n            },\r\n            (error) => {\r\n                if (error.response) {\r\n                    const resMessage = error.response.data.response;\r\n                    setResponseError(resMessage);\r\n                    console.log(error);\r\n                }else {\r\n                    console.log(error);\r\n                    setResponseError(\"Verification failed: Cannot resend email!\")\r\n                }\r\n            }\r\n          );\r\n        setIsSending(false);\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n                <form className=\"auth-form\"  onSubmit={handleSubmit(onSubmit)}>\r\n                <h2>Verify your email</h2><br/>\r\n                \r\n                {\r\n                    isSending ? \r\n                        <div className='msg'>Sending email to {email}...</div> \r\n                        : (response_error===\"\") \r\n                        ? <div className='msg'>The verification code has been sent to <span style={{fontWeight:600,  color:'green'}}>{email}</span>.</div>\r\n                        : <></>\r\n                }\r\n\r\n                {\r\n                    (response_error!==\"\") && <p>{response_error}</p>\r\n                }\r\n                \r\n                <div className='input-box'>\r\n                    <input \r\n                    placeholder='Enter verification code'\r\n                        type='text'\r\n                        {...register('code', {\r\n                            required: \"Code is required!\",\r\n                        })}\r\n                    />\r\n                    {formState.errors.code && <small>{formState.errors.code.message}</small>}\r\n                </div>\r\n\r\n                <div className='msg' style={{fontWeight: 600, fontStyle: 'italic'}}>Please not that the verification code will be expired with in 15 minutes!</div>\r\n                <br/>\r\n\r\n                <div className='input-box'>\r\n                    <input type='submit' value={isLoading ? \"Verifying\" : 'Verify'}\r\n                     className={isLoading ? \"button button-fill loading\" : \"button button-fill\"}\r\n                    />\r\n                </div>\r\n\r\n                <br/>\r\n                <div className='msg'>Having problems? <span style={{cursor: 'pointer'}} onClick={resendCode} className='inline-link'>{isLoading ? \"Sending code\" : 'Resend code'}</span></div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForgotPasswordCodeVerification;"],"names":["navigate","useNavigate","email","useParams","register","handleSubmit","formState","useForm","response_error","setResponseError","useState","isLoading","setIsLoading","isSending","setIsSending","_jsx","className","children","_jsxs","onSubmit","async","AuthService","forgotPasswordverifyCode","data","code","then","response","console","log","message","status","concat","error","resMessage","style","fontWeight","color","_Fragment","placeholder","type","required","errors","fontStyle","value","cursor","onClick","resendResetPasswordVerificationCode"],"sourceRoot":""}