{"version":3,"file":"static/js/63.e2db9859.chunk.js","mappings":"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","sources":["components/userDashboard/dashboardDetailBox.js","components/userDashboard/categoryExpenseChart.js","components/userDashboard/budget.js","hooks/useDashboard.js","pages/user/dashboard.js"],"sourcesContent":["import incomeImg from '../../assets/images/income.png'\r\nimport expenseImg from '../../assets/images/expense.png'\r\nimport cashInHandImg from '../../assets/images/cashInHand.png'\r\nimport transactionImg from '../../assets/images/transaction.png'\r\n\r\nfunction DashboardDetailBox({ total_income, total_expense, cash_in_hand, no_of_transactions }) {\r\n\r\n    return (\r\n        <div className='details'>\r\n            <Box amount={'Rs. ' + total_income} src={incomeImg} title=\"Income\"/>\r\n            <Box amount={'Rs. ' + total_expense} src={expenseImg} title=\"Expense\"/>\r\n            <Box amount={'Rs. ' + cash_in_hand} src={cashInHandImg} title=\"Cash in hand\"/>\r\n            <Box amount={no_of_transactions} src={transactionImg} title=\"No of transactions\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Box({amount, src, title}) {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h2>{amount}</h2>\r\n                <h4>{title}</h4>\r\n            </div>\r\n            <img src={src}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DashboardDetailBox;","import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\r\n\r\n\r\nfunction CategoryExpenseChart({ categorySummary }) {\r\n    const COLORS = [\"#ff6e6e\", \"#ffb26e\", \"#e6cd10\", \"#00a33c\", \"#6ea1ff\", \"#a36eff\", \"#ff6eff\", \"#6ee0ff\", \"#676d6e\"];\r\n\r\n    return (\r\n        <div className='chart'>\r\n            <ResponsiveContainer>\r\n                <PieChart width={50} height={100}>\r\n                    <Pie\r\n                        data={categorySummary}\r\n                        cx={280}\r\n                        cy={135}\r\n                        innerRadius={80}\r\n                        outerRadius={110}\r\n                        fill=\"#8884d8\"\r\n                        paddingAngle={0}\r\n                        dataKey=\"amount\"\r\n                        label\r\n                    >\r\n                        {categorySummary.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                        ))}\r\n                    </Pie>\r\n                    <Legend dataKey='category' />\r\n                    <Tooltip />\r\n                </PieChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default CategoryExpenseChart;","import { useState } from \"react\";\r\nimport { useForm } from 'react-hook-form';\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\r\nimport '../../assets/styles/transactionList.css'\r\n\r\nfunction Budget({totalExpense, budgetAmount, saveBudget, currentMonth}) {\r\n\r\n    const { register, handleSubmit, reset, formState } = useForm();\r\n    const [formToggle, setFormToggle] = useState(false)\r\n    const balance = (budgetAmount-totalExpense < 0) ? 0 : budgetAmount-totalExpense\r\n\r\n    const toggleForm = (e) => {\r\n        e.preventDefault()\r\n        setFormToggle(!formToggle)\r\n        reset({amount: budgetAmount})\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveBudget(formData)\r\n        setFormToggle(!formToggle)\r\n        reset({amount: budgetAmount})\r\n    }\r\n\r\n    const data2 = [\r\n        { name: 'Spent', value: totalExpense },\r\n        { name: 'Balace', value:  balance}\r\n    ];\r\n\r\n    const COLORS2 = [\"#ff6464\", \"#53d37d\"];\r\n\r\n    return (\r\n        <>\r\n            <div className='chart'>\r\n                <div className=\"chart-top\">\r\n                    <h2>Budget: {budgetAmount}</h2> \r\n                    {\r\n                        (currentMonth.id === new Date().getMonth() + 1) && ( <button onClick={toggleForm}>Edit</button> )\r\n                    }\r\n                </div>\r\n                <ResponsiveContainer height={220}>\r\n                    <PieChart width={50} height={100}>\r\n                        <Pie\r\n                            data={data2}\r\n                            cx={280}\r\n                            cy={140}\r\n                            startAngle={180}\r\n                            endAngle={0}\r\n                            innerRadius={80}\r\n                            outerRadius={110}\r\n                            fill=\"#8884d8\"\r\n                            paddingAngle={0}\r\n                            dataKey=\"value\"\r\n                            label\r\n                        >\r\n                            {data2.map((entry, index) => (\r\n                                <Cell key={`cell-${index}`} fill={COLORS2[index]} />\r\n                            ))}\r\n                        </Pie>\r\n                        <Legend />\r\n                        <Tooltip />\r\n                    </PieChart>\r\n                </ResponsiveContainer>\r\n                <h4>Remaining: {budgetAmount - totalExpense}</h4>\r\n            </div>\r\n\r\n            <div className={formToggle ? 'budget-form active' : 'budget-form'}>\r\n                <form className='auth-form t-form' onSubmit={handleSubmit(onSubmit)}>\r\n                    <h1>Budget settings</h1>\r\n                    <hr/>\r\n                    <div className='input-box'>\r\n                        <label>Amount</label><br />\r\n                        <input\r\n                            type='text'\r\n                            {...register('amount', {\r\n                                required: \"Amount is required!\",\r\n                                pattern: { value: /^[0-9.]{1,}$/g, message: \"Invalid amount!\" }\r\n                            })}\r\n                        />\r\n                        {formState.errors.amount && <small>{formState.errors.amount.message}</small>}\r\n                    </div>\r\n                    <div className='t-btn input-box'>\r\n                        <input type='submit' value=\"Save\"\r\n                            className=\"button button-fill\" />\r\n                        <input type='submit' className='button outline' value='Cancel' onClick={(e) => toggleForm(e)} />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Budget;","import { useEffect, useState } from \"react\";\r\nimport useCategories from \"./useCategories\";\r\nimport UserService from \"../services/userService\";\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nfunction useDashboard(currentMonth) {\r\n    const [total_income, setIncome] = useState(0)\r\n    const [total_expense, setExpense] = useState(0)\r\n    const [no_of_transactions, setTransactions] = useState(0)\r\n    const cash_in_hand = total_income > total_expense ? Number((total_income - total_expense)?.toFixed(2)) : 0;\r\n    const [categories] = useCategories()\r\n    const [categorySummary, setCategorySummary] = useState([])\r\n    const [budgetAmount, setBudgetAmount] = useState(0)\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n\r\n    const generateTransactionSummary = async () => {\r\n        setIsLoading(true)\r\n        const income_response = await UserService.getTotalIncomeOrExpense(AuthService.getCurrentUser().id, 2, currentMonth.id, currentMonth.year).then(\r\n            (response) => {\r\n                if (response.data.status === \"SUCCESS\") {\r\n                    setIncome(Number((response.data.response) ? response.data.response.toFixed(2) : 0))\r\n                }\r\n            },\r\n            (error) => {\r\n                setIsError(true)\r\n            }\r\n        )\r\n\r\n        const expense_response = await UserService.getTotalIncomeOrExpense(AuthService.getCurrentUser().id, 1, currentMonth.id, currentMonth.year).then(\r\n            (response) => {\r\n                if (response.data.status === \"SUCCESS\") {\r\n                    setExpense(Number((response.data.response) ? response.data.response.toFixed(2) : 0))\r\n                }\r\n            },\r\n            (error) => {\r\n                setIsError(true)\r\n            }\r\n        )\r\n\r\n        const no_response = await UserService.getTotalNoOfTransactions(AuthService.getCurrentUser().id, currentMonth.id, currentMonth.year).then(\r\n            (response) => {\r\n                if (response.data.status === \"SUCCESS\") {\r\n                    setTransactions(response.data.response)\r\n                }\r\n            },\r\n            (error) => {\r\n                setIsError(true)\r\n            }\r\n        )\r\n        setIsLoading(false)\r\n\r\n    }\r\n\r\n    const generateCategorySummary = async () => {\r\n        setIsLoading(true)\r\n        const filtered = [];\r\n        await Promise.all(categories.filter(cat => cat.transactionType.transactionTypeId === 1).map(async (cat) => {\r\n            try {\r\n                const response = await UserService.getTotalByCategory(AuthService.getCurrentUser().email, cat.categoryId, currentMonth.id, currentMonth.year);\r\n                if (response.data.status === \"SUCCESS\" && response.data.response) {\r\n                    filtered.push({ name: cat.categoryName, amount: Number(response.data.response ? response.data.response.toFixed(2) : 0) });\r\n                }\r\n            } catch (error) {\r\n                setIsError(true)\r\n            }\r\n        }));\r\n        setCategorySummary(filtered)\r\n        setIsLoading(false)\r\n    }\r\n\r\n    const fetchBudget = async () => {\r\n        setIsLoading(true)\r\n        const response = await UserService.getBudget(currentMonth.id, currentMonth.year)\r\n            .then((response) => {\r\n                setBudgetAmount(response.data.response)\r\n            })\r\n            .catch((error) => {\r\n                setIsError(true)\r\n            })\r\n        setIsLoading(false)\r\n    }\r\n\r\n    const saveBudget = async (d) => {\r\n        const response = await UserService.createBudget(d.amount)\r\n            .then((response) => {\r\n            })\r\n            .catch((error) => {\r\n                setIsError(true)\r\n            })\r\n        fetchBudget()\r\n    }\r\n\r\n    useEffect(() => {\r\n        generateTransactionSummary()\r\n        if (categories) {\r\n            generateCategorySummary()\r\n        }\r\n        fetchBudget()\r\n    }, [currentMonth, categories])\r\n\r\n    return [\r\n        total_expense,\r\n        total_income,\r\n        cash_in_hand,\r\n        no_of_transactions,\r\n        categorySummary,\r\n        budgetAmount,\r\n        saveBudget,\r\n        isLoading,\r\n        isError\r\n    ]\r\n\r\n\r\n}\r\n\r\nexport default useDashboard;","import '../../assets/styles/dashboard.css';\r\nimport { useState } from 'react';\r\nimport DashboardDetailBox from '../../components/userDashboard/dashboardDetailBox';\r\nimport CategoryExpenseChart from '../../components/userDashboard/categoryExpenseChart';\r\nimport Header from '../../components/utils/header';\r\nimport Budget from '../../components/userDashboard/budget';\r\nimport useDashboard from '../../hooks/useDashboard';\r\nimport Loading from '../../components/utils/loading';\r\nimport Info from '../../components/utils/Info';\r\nimport Container from '../../components/utils/Container';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nfunction Dashboard() {\r\n\r\n    const months = getMonths()\r\n    const [currentMonth, setMonth] = useState(months[0])\r\n\r\n    const [total_expense, total_income, cash_in_hand, no_of_transactions, categorySummary, budgetAmount,\r\n        saveBudget, isLoading, isError] = useDashboard(currentMonth)\r\n\r\n    const onMonthChange = (id) => {\r\n        const month = months.find(m => m.id == id)\r\n        setMonth(month)\r\n    }\r\n\r\n    return (\r\n        <Container activeNavId={0}>\r\n            <Header title=\"Dashboard\" />\r\n            <Toaster/>\r\n            {(isLoading) && <Loading />}\r\n            {(isError) && toast.error(\"Failed to fetch information. Try again later!\")}\r\n            {(!isError) && <SelectMonth months={months} onMonthChange={onMonthChange} />}\r\n            {(!isLoading &&  total_expense === 0) && <Info text={\"You have no expenses in this month!\"} />}\r\n            {\r\n                (!isError && total_expense !== 0) && <>\r\n                    <DashboardDetailBox total_expense={total_expense} total_income={total_income} cash_in_hand={cash_in_hand} no_of_transactions={no_of_transactions} />\r\n                    <div className='dashboard-chart'>\r\n                        <CategoryExpenseChart categorySummary={categorySummary} />\r\n                        <Budget totalExpense={total_expense} budgetAmount={budgetAmount} saveBudget={saveBudget} currentMonth={currentMonth} />\r\n                    </div>\r\n                </>\r\n            }\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default Dashboard;\r\n\r\nfunction getMonths() {\r\n    const months = []\r\n    const current_date = new Date()\r\n\r\n    for (let i = 0; i <= 11; i++) {\r\n        const date = new Date(current_date.getFullYear(), current_date.getMonth() - i, 1)\r\n        months.push({\r\n            id: date.getMonth() + 1,\r\n            year: date.getFullYear(),\r\n            monthName: date.toLocaleString('en-US', { month: 'long' })\r\n        })\r\n    }\r\n\r\n    return months;\r\n}\r\n\r\nfunction SelectMonth({ months, onMonthChange }) {\r\n    return (\r\n        <div>\r\n            <select onChange={(e) => onMonthChange(e.target.value)}>\r\n                {\r\n                    months.map((m) => {\r\n                        return (\r\n                            <option value={m.id} key={m.id}>{m.monthName} {m.year}</option>\r\n                        )\r\n                    })\r\n                }\r\n            </select>\r\n        </div>\r\n    )\r\n}"],"names":["Box","_ref2","amount","src","title","_jsxs","children","_jsx","_ref","total_income","total_expense","cash_in_hand","no_of_transactions","className","categorySummary","COLORS","ResponsiveContainer","PieChart","width","height","Pie","data","cx","cy","innerRadius","outerRadius","fill","paddingAngle","dataKey","label","map","entry","index","Cell","length","concat","Legend","Tooltip","totalExpense","budgetAmount","saveBudget","currentMonth","register","handleSubmit","reset","formState","useForm","formToggle","setFormToggle","useState","toggleForm","e","preventDefault","data2","name","value","COLORS2","_Fragment","id","Date","getMonth","onClick","startAngle","endAngle","onSubmit","formData","type","required","pattern","message","errors","setIncome","setExpense","setTransactions","Number","toFixed","categories","useCategories","setCategorySummary","setBudgetAmount","isLoading","setIsLoading","isError","setIsError","fetchBudget","async","UserService","getBudget","year","then","response","catch","error","useEffect","getTotalIncomeOrExpense","AuthService","getCurrentUser","status","getTotalNoOfTransactions","generateTransactionSummary","filtered","Promise","all","filter","cat","transactionType","transactionTypeId","getTotalByCategory","email","categoryId","push","categoryName","generateCategorySummary","createBudget","d","months","current_date","i","date","getFullYear","monthName","toLocaleString","month","getMonths","setMonth","useDashboard","Container","activeNavId","Header","Toaster","Loading","toast","SelectMonth","onMonthChange","find","m","Info","text","DashboardDetailBox","CategoryExpenseChart","Budget","onChange","target"],"sourceRoot":""}