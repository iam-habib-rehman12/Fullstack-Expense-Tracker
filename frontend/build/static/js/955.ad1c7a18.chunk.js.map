{"version":3,"file":"static/js/955.ad1c7a18.chunk.js","mappings":"gNAmGA,QA5FA,WAEI,MAAMA,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,KACFC,EAAAA,EAAYC,kBAAoBD,EAAAA,EAAYC,iBAAiBC,MAAMC,SAAS,aAC5EN,EAAS,mBACHG,EAAAA,EAAYC,kBAAoBD,EAAAA,EAAYC,iBAAiBC,MAAMC,SAAS,eAClFN,EAAS,sBACb,GACD,IAGH,MAAM,SAACO,EAAQ,aAAEC,EAAY,UAACC,IAAaC,EAAAA,EAAAA,OAEpCC,EAAgBC,IAAoBC,EAAAA,EAAAA,UAAS,KAC7CC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GA8B3C,OACIG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBC,EAAAA,EAAAA,MAAA,QAAMF,UAAU,YAAaG,SAAUZ,GA9B9Ba,UACbN,GAAa,SACPZ,EAAAA,EAAYmB,UAAUC,EAAKC,MAAOD,EAAKE,UAAUC,MACnD,KACId,EAAiB,IAEjBe,YAAW,KACHxB,EAAAA,EAAYC,iBAAiBC,MAAMC,SAAS,aAC5CN,EAAS,mBACHG,EAAAA,EAAYC,iBAAiBC,MAAMC,SAAS,eAClDN,EAAS,sBACb,GACD,KACH4B,aAAaC,QAAQ,UAAWC,KAAKC,UAAU,CAAEC,OAAQ,UAAWC,KAAM,uBAAwB,IAErGC,IACG,MAAMC,EAAaD,EAAME,UAAYF,EAAME,SAASb,MAAQW,EAAME,SAASb,KAAKc,SAAYH,EAAMG,SAAWH,EAAMI,WACnHC,QAAQC,IAAIL,GAERvB,EADe,oBAAfuB,EACiB,6BAEA,yCACrB,IAGRpB,GAAa,EAAM,IAK+CG,SAAA,EAC9DF,EAAAA,EAAAA,KAACyB,EAAAA,EAAI,KACDzB,EAAAA,EAAAA,KAAA,MAAAE,SAAI,UAEkB,KAAjBP,IAAwBK,EAAAA,EAAAA,KAAA,KAAAE,SAAIP,KAGjCQ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,WAAaF,EAAAA,EAAAA,KAAA,UACpBA,EAAAA,EAAAA,KAAA,SACI0B,KAAK,UACDnC,EAAS,QAAS,CAClBoC,SAAU,qBACVC,QAAS,CAACC,MAAM,mCAAoCR,QAAQ,8BAGnE5B,EAAUqC,OAAOtB,QAASR,EAAAA,EAAAA,KAAA,SAAAE,SAAQT,EAAUqC,OAAOtB,MAAMa,cAG9DlB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,cAAgBF,EAAAA,EAAAA,KAAA,UACvBA,EAAAA,EAAAA,KAAA,SACI0B,KAAK,cAEEnC,EAAS,WAAY,CACpBoC,SAAU,4BAIrBlC,EAAUqC,OAAOrB,WAAYT,EAAAA,EAAAA,KAAA,SAAAE,SAAQT,EAAUqC,OAAOrB,SAASY,cAEpElB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,CAAC,KAACF,EAAAA,EAAAA,KAAC+B,EAAAA,GAAI,CAACC,GAAI,mCAAoC/B,UAAU,cAAaC,SAAC,yBAA6BF,EAAAA,EAAAA,KAAA,UAEzHA,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACtBF,EAAAA,EAAAA,KAAA,SAAO0B,KAAK,SAASG,MAAO/B,EAAY,gBAAkB,QACtDG,UAAWH,EAAY,6BAA+B,0BAG9DE,EAAAA,EAAAA,KAAA,UAAKG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,MAAKC,SAAA,CAAC,gBAAYF,EAAAA,EAAAA,KAAC+B,EAAAA,GAAI,CAACC,GAAG,iBAAiB/B,UAAU,cAAaC,SAAC,yBAIxG,C","sources":["pages/auth/login/login.js"],"sourcesContent":["import {useEffect, useState} from 'react';\r\nimport '../../../assets/styles/register.css';\r\nimport {useForm} from 'react-hook-form';\r\nimport { Link, useNavigate} from 'react-router-dom';\r\nimport AuthService from '../../../services/auth.service';\r\nimport Logo from '../../../components/utils/Logo';\r\n\r\nfunction Login() {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (AuthService.getCurrentUser() && AuthService.getCurrentUser().roles.includes(\"ROLE_USER\")) {\r\n            navigate(\"/user/dashboard\");\r\n        }else if (AuthService.getCurrentUser() && AuthService.getCurrentUser().roles.includes(\"ROLE_ADMIN\")) {\r\n            navigate(\"/admin/transactions\");\r\n        }\r\n    }, [])\r\n\r\n\r\n    const {register, handleSubmit,formState} = useForm();\r\n\r\n    const [response_error, setResponseError] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const onSubmit = async (data) => {\r\n        setIsLoading(true)        \r\n        await AuthService.login_req(data.email, data.password).then(\r\n            () => {\r\n                setResponseError(\"\");\r\n\r\n                setTimeout(() => {\r\n                    if (AuthService.getCurrentUser().roles.includes(\"ROLE_USER\")) {\r\n                        navigate(\"/user/dashboard\");\r\n                    }else if (AuthService.getCurrentUser().roles.includes(\"ROLE_ADMIN\")) {\r\n                        navigate(\"/admin/transactions\");\r\n                    }\r\n                }, 5000)\r\n                localStorage.setItem(\"message\", JSON.stringify({ status: \"SUCCESS\", text: \"Login successfull!\" }))\r\n            },\r\n            (error) => {\r\n                const resMessage =(error.response && error.response.data && error.response.data.message) || error.message || error.toString();\r\n                console.log(resMessage);\r\n                if (resMessage === \"Bad credentials\"){\r\n                    setResponseError(\"Invalid email or password!\");\r\n                }else {\r\n                    setResponseError(\"Something went wrong: Try again later!\");\r\n                }\r\n            }\r\n          );\r\n        setIsLoading(false);\r\n    }\r\n\r\n    return(\r\n        <div className='container'>\r\n            <form className=\"auth-form\"  onSubmit={handleSubmit(onSubmit)}>\r\n            <Logo/>\r\n                <h2>Login</h2>\r\n                {\r\n                    (response_error!==\"\") && <p>{response_error}</p>\r\n                }\r\n                \r\n                <div className='input-box'>\r\n                    <label>Email</label><br/>\r\n                    <input \r\n                        type='text'\r\n                        {...register('email', {\r\n                            required: \"Email is required!\",\r\n                            pattern: {value:/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g, message:\"Invalid email address!\"}\r\n                        })}\r\n                    />\r\n                    {formState.errors.email && <small>{formState.errors.email.message}</small>}\r\n                </div>\r\n                \r\n                <div className='input-box'>\r\n                    <label>Password</label><br/>\r\n                    <input \r\n                        type='password'\r\n                        {\r\n                            ...register('password', {\r\n                                required: 'Password is required!'\r\n                            })\r\n                        }\r\n                    />\r\n                    {formState.errors.password && <small>{formState.errors.password.message}</small>}\r\n                </div>\r\n                <div className='msg'> <Link to={'/auth/forgetpassword/verifyEmail'} className='inline-link'>Forgot password?</Link></div><br/>\r\n                \r\n                <div className='input-box'>\r\n                    <input type='submit' value={isLoading ? \"Logging in...\" : 'Login'}\r\n                        className={isLoading ? \"button button-fill loading\" : \"button button-fill\"}\r\n                    />\r\n                </div>\r\n                <br/><div className='msg'>New member? <Link to='/auth/register' className='inline-link'>Register Here</Link></div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;"],"names":["navigate","useNavigate","useEffect","AuthService","getCurrentUser","roles","includes","register","handleSubmit","formState","useForm","response_error","setResponseError","useState","isLoading","setIsLoading","_jsx","className","children","_jsxs","onSubmit","async","login_req","data","email","password","then","setTimeout","localStorage","setItem","JSON","stringify","status","text","error","resMessage","response","message","toString","console","log","Logo","type","required","pattern","value","errors","Link","to"],"sourceRoot":""}