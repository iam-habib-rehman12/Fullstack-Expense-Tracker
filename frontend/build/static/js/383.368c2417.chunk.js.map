{"version":3,"file":"static/js/383.368c2417.chunk.js","mappings":"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","sources":["components/userTransactions/transactionForm.js","pages/user/newTransaction.js"],"sourcesContent":["import { useForm } from 'react-hook-form';\r\nimport { useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction TransactionForm({ categories, onSubmit, isDeleting, isSaving, transaction, onDelete }) {\r\n    // form field controll\r\n    const { register, handleSubmit, watch, reset, formState } = useForm();\r\n    const date = useRef({});\r\n    date.current = watch('date');\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (transaction && transaction.transactionId) {\r\n            reset({\r\n                category: String(transaction.categoryId),\r\n                description: transaction.description,\r\n                amount: transaction.amount,\r\n                date: transaction.date.split('T')[0]\r\n            })\r\n        }\r\n    }, [reset, transaction])\r\n\r\n    const deleteTransaction = (e, id) => {\r\n        e.preventDefault()\r\n        onDelete(id)\r\n    }\r\n\r\n    const cancelProcess = (e) => {\r\n        e.preventDefault()\r\n        navigate('/user/transactions')\r\n    }\r\n\r\n\r\n    return (\r\n        <form className=\"auth-form t-form\" onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            <div className='input-box'>\r\n\r\n                {/* input category */}\r\n                <label>Transaction Category</label><br />\r\n                <div className='radio'>\r\n\r\n                    {\r\n                        categories.filter(cat => cat.enabled).map((cat) => {\r\n                            return (\r\n                                <span key={cat.categoryId}>\r\n                                    <input\r\n                                        type='radio'\r\n                                        id={cat.categoryName}\r\n                                        value={cat.categoryId}\r\n                                        {...register('category', {\r\n                                            required: \"category is required\"\r\n                                        })}\r\n                                    /><label for={cat.categoryName}>{cat.categoryName}</label>\r\n                                </span>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n                {formState.errors.category && <small>{formState.errors.category.message}</small>}\r\n            </div>\r\n\r\n            {/* input description */}\r\n            <div className='input-box'>\r\n                <label>Transaction description</label><br />\r\n                <input\r\n                    type='text'\r\n                    {...register('description', {\r\n                        maxLength: {\r\n                            value: 50,\r\n                            message: \"Description can have atmost 50 characters!\"\r\n                        }\r\n                    })}\r\n                />\r\n                {formState.errors.description && <small>{formState.errors.description.message}</small>}\r\n            </div>\r\n\r\n            {/* input amount */}\r\n            <div className='input-box'>\r\n                <label>Amount</label><br />\r\n                <input\r\n                    type='text'\r\n                    {...register('amount', {\r\n                        required: \"Amount is required!\",\r\n                        pattern: { value: /^[0-9.]{1,}$/g, message: \"Invalid amount!\" }\r\n                    })}\r\n                />\r\n                {formState.errors.amount && <small>{formState.errors.amount.message}</small>}\r\n            </div>\r\n\r\n            {/* input date */}\r\n            <div className='input-box'>\r\n                <label>Date</label><br />\r\n                <input\r\n                    type='date'\r\n                    value={(date.current === undefined) ? new Date().toISOString().split('T')[0] : date.current}\r\n                    {...register('date')}\r\n                />\r\n                {formState.errors.date && <small>{formState.errors.date.message}</small>}\r\n            </div>\r\n\r\n            <div className='t-btn input-box'>\r\n                <input type='submit' value={isSaving ? \"Saving...\" : 'Save transaction'}\r\n                    className={isSaving ? \"button button-fill loading\" : \"button button-fill\"} />\r\n                <input type='submit' className='button outline' value='Cancel' onClick={(e) => cancelProcess(e)} />\r\n\r\n            </div>\r\n            {\r\n                transaction ?\r\n                    <div className='t-btn input-box'>\r\n                        <button\r\n                            className={isDeleting ? \"button delete loading\" : \"button delete\"}\r\n                            onClick={(e) => deleteTransaction(e, transaction.transactionId)} \r\n                        >\r\n                            {isDeleting ? \"Deleting...\" : 'Delete transaction'} \r\n                        </button>\r\n                    </div>\r\n                    : <></>\r\n            }\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TransactionForm;","import { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport AuthService from '../../services/auth.service';\r\nimport UserService from '../../services/userService';\r\nimport TransactionForm from '../../components/userTransactions/transactionForm';\r\nimport TransactionTypeSelectWrapper from '../../components/userTransactions/transactionTypeSelectWrapper';\r\nimport Header from '../../components/utils/header';\r\nimport Message from '../../components/utils/message';\r\nimport Loading from '../../components/utils/loading';\r\nimport useCategories from '../../hooks/useCategories';\r\nimport Info from '../../components/utils/Info';\r\nimport Container from '../../components/utils/Container';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\n\r\nconst transactionTypes = [{ 'id': 1, 'name': 'Expense' }, { 'id': 2, 'name': 'Income' }]\r\n\r\nfunction NewTransaction() {\r\n\r\n    const [categories, isFetching] = useCategories();\r\n    const [filteredCategories, setFilteredCategories] = useState([]);\r\n    const [activeTransactionType, setTransactionType] = useState(1);\r\n    const [isSaving, setIsSaving] = useState(false);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        setFilteredCategories(categories.filter(cat => cat.transactionType.transactionTypeId === activeTransactionType));\r\n    }, [categories, activeTransactionType])\r\n\r\n    const onSubmit = async (data) => {\r\n        setIsSaving(true)\r\n        await UserService.add_transaction(\r\n            AuthService.getCurrentUser().email, data.category, data.description, data.amount, data.date\r\n        ).then(\r\n            (response) => {\r\n                if (response.data.status === \"SUCCESS\") {\r\n                    navigate(\"/user/transactions\", { state: { text: response.data.response } })\r\n                }\r\n            },\r\n            (error) => {\r\n                error.response ?\r\n                    toast.error(error.response.data.response)\r\n                    :\r\n                    toast.error(\"Failed to add transaction: Try again later!\" )\r\n            }\r\n        );\r\n        setIsSaving(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <Container activeNavId={2}>\r\n            <Header title=\"New Transaction\" />\r\n            <Toaster/>\r\n            {(isFetching) && <Loading />}\r\n            {(!isFetching && categories.length === 0) && <Info text=\"No data found!\" />}\r\n            {\r\n                (!isFetching && categories.length !== 0) && (\r\n                    <>\r\n                        <TransactionTypeSelectWrapper\r\n                            transactionTypes={transactionTypes}\r\n                            setTransactionType={setTransactionType}\r\n                            activeTransactionType={activeTransactionType}\r\n                        />\r\n                        <TransactionForm categories={filteredCategories} onSubmit={onSubmit} isSaving={isSaving} />\r\n                    </>\r\n                )\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default NewTransaction;"],"names":["_ref","categories","onSubmit","isDeleting","isSaving","transaction","onDelete","register","handleSubmit","watch","reset","formState","useForm","date","useRef","current","navigate","useNavigate","useEffect","transactionId","category","String","categoryId","description","amount","split","_jsxs","className","children","_jsx","filter","cat","enabled","map","type","id","categoryName","value","required","for","errors","message","maxLength","pattern","undefined","Date","toISOString","onClick","e","preventDefault","cancelProcess","deleteTransaction","_Fragment","transactionTypes","isFetching","useCategories","filteredCategories","setFilteredCategories","useState","activeTransactionType","setTransactionType","setIsSaving","transactionType","transactionTypeId","Container","activeNavId","Header","title","Toaster","Loading","length","Info","text","TransactionTypeSelectWrapper","TransactionForm","async","UserService","add_transaction","AuthService","getCurrentUser","email","data","then","response","status","state","error","toast"],"sourceRoot":""}