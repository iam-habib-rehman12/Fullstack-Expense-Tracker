{"version":3,"file":"static/js/322.d5bd1f5f.chunk.js","mappings":"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","sources":["components/utils/pageInfo.js","components/utils/search.js","hooks/usePagination.js","pages/admin/transactions.js","services/adminService.js"],"sourcesContent":["import { memo } from \"react\";\r\n\r\nconst PageInfo = memo(({ info, onPrevClick, onNextClick, pageNumber, noOfPages }) => {\r\n    return (\r\n        <div className=\"page-info\">\r\n            <span>{info}</span>\r\n            <button onClick={onPrevClick} className={pageNumber == 0 ? \"disable\" : \"\"}><i class='fa fa-caret-left' aria-hidden='true'></i></button>\r\n            <button onClick={onNextClick} className={pageNumber + 1 == noOfPages ? \"disable\" : \"\"}><i class='fa fa-caret-right' aria-hidden='true'></i></button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default PageInfo;","import { memo } from \"react\";\r\n\r\nconst Search = memo(({ onChange, placeholder }) => {\r\n    return (\r\n        <input\r\n            type='text'\r\n            placeholder={placeholder}\r\n            onChange={(e) => onChange(e.target.value)}\r\n        />\r\n    )\r\n})\r\n\r\nexport default Search;","import { useState } from \"react\";\r\n\r\nfunction usePagination(initialSortField = null) {\r\n    const pageSize = 10;\r\n    const [pageNumber, setPageNumber] = useState(0);\r\n    const [noOfPages, setNoOfPages] = useState(1);\r\n    const [noOfRecords, setNoOfRecords] = useState(0);\r\n    const [sortField, setSortField] = useState(initialSortField)\r\n    const [sortDirec, setSortDirec] = useState('DESC')\r\n    const [searchKey, setSearchKey] = useState('');\r\n\r\n    const onPrevClick = () => {\r\n        if (pageNumber !== 0) {\r\n            setPageNumber(pageNumber - 1)\r\n        }\r\n    }\r\n\r\n    const onNextClick = () => {\r\n        setPageNumber(pageNumber + 1)\r\n    }\r\n\r\n    const getPageInfo = () => {\r\n        const start = (pageNumber * pageSize) + 1\r\n        const end = pageNumber + 1 === noOfPages ? noOfRecords : (pageNumber * pageSize) + pageSize\r\n\r\n        return String(start) + \" to \" + String(end) + \" of \" + String(noOfRecords) + \" records\"\r\n    }\r\n\r\n    return {\r\n        pageSize, pageNumber, noOfPages, sortField, sortDirec, searchKey,\r\n        onNextClick, onPrevClick, setNoOfPages, setNoOfRecords, setSortField, setSortDirec, setSearchKey, getPageInfo\r\n    }\r\n}\r\n\r\nexport default usePagination;","import { useEffect, useState } from \"react\";\r\nimport AdminService from \"../../services/adminService\";\r\nimport '../../assets/styles/user.css'\r\nimport Header from \"../../components/utils/header\";\r\nimport Loading from \"../../components/utils/loading\";\r\nimport Search from \"../../components/utils/search\";\r\nimport PageInfo from \"../../components/utils/pageInfo\";\r\nimport usePagination from \"../../hooks/usePagination\";\r\nimport Info from \"../../components/utils/Info\";\r\nimport Container from \"../../components/utils/Container\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\n\r\nfunction AdminTransactionsManagement() {\r\n\r\n    const [data, setData] = useState([]);\r\n    const [isFetching, setIsFetching] = useState(true);\r\n\r\n    const {\r\n        pageSize, pageNumber, noOfPages, searchKey,\r\n        onNextClick, onPrevClick, setNoOfPages, setNoOfRecords, setSearchKey, getPageInfo\r\n    } = usePagination()\r\n\r\n\r\n    const getTransactions = async () => {\r\n        await AdminService.getAllTransactions(pageNumber, pageSize, searchKey).then(\r\n            (response) => {\r\n                if (response.data.status === 'SUCCESS') {\r\n                    setData(response.data.response.data)\r\n                    setNoOfPages(response.data.response.totalNoOfPages)\r\n                    setNoOfRecords(response.data.response.totalNoOfRecords)\r\n                    return\r\n                }\r\n            },\r\n            (error) => {\r\n                toast.error(\"Failed to fetch all transactions: Try again later!\")\r\n            }\r\n        )\r\n        setIsFetching(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getTransactions();\r\n    }, [searchKey, pageNumber])\r\n\r\n    return (\r\n        <Container activeNavId={4}>\r\n            <Header title=\"Transactions\" />\r\n            <Toaster/>\r\n            {(isFetching) && <Loading />}\r\n            {(!isFetching) &&\r\n                <>\r\n                    <div className=\"utils page\">\r\n                        <Search onChange={(val) => setSearchKey(val)} placeholder=\"Search transactions\" />\r\n                        <PageInfo info={getPageInfo()} onPrevClick={onPrevClick} onNextClick={onNextClick}\r\n                            pageNumber={pageNumber} noOfPages={noOfPages}\r\n                        />\r\n                    </div>\r\n                    {(data.length === 0) && <Info text={\"No transactions found!\"} />}\r\n                    {(data.length !== 0) && (\r\n                        <table>\r\n                            <TransactionsTableHeader />\r\n                            <TransactionsTableBody data={data} />\r\n                        </table>\r\n                    )}\r\n                </>\r\n            }\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default AdminTransactionsManagement;\r\n\r\n\r\nfunction TransactionsTableHeader() {\r\n    return (\r\n        <tr>\r\n            <th>Transaction Id</th> <th>Email</th>\r\n            <th>Description</th> <th>Amount</th>\r\n            <th>Category</th> <th>Date</th>\r\n        </tr>\r\n    )\r\n}\r\nfunction TransactionsTableBody({ data }) {\r\n    return data.map((item) => {\r\n        return (\r\n            <tr key={item.transactionId}>\r\n                <td>\r\n                    <span>\r\n                        {\"T\" + String(item.transactionId).padStart(5, '0')}\r\n                    </span>\r\n                </td>\r\n                <td>{item.userEmail}</td>\r\n                <td>{item.description || \"-\"}</td>\r\n                <td>\r\n                    {\r\n                        item.transactionType === 1 ? \"- \" : \"+ \"\r\n                    }\r\n                    {item.amount}\r\n                </td>\r\n                <td>{item.categoryName}</td>\r\n                <td>\r\n                    {\r\n                        new Date(item.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: '2-digit' })\r\n                    }\r\n                </td>\r\n            </tr>\r\n        )\r\n    })\r\n}","import axios from \"axios\";\r\nimport AuthService from \"./auth.service\";\r\nimport API_BASE_URL from \"./auth.config\";\r\n\r\nconst getAllTransactions = (pagenumber, pageSize, searchKey) => {\r\n    return axios.get(\r\n        API_BASE_URL + \"/transaction/getAll\",\r\n        {\r\n            headers: AuthService.authHeader(),\r\n            params: {\r\n                pageNumber: pagenumber,\r\n                pageSize: pageSize,\r\n                searchKey: searchKey\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst getAllUsers = (pagenumber, pageSize, searchKey) => {\r\n    return axios.get(\r\n        API_BASE_URL + \"/user/getAll\",\r\n        {\r\n            headers: AuthService.authHeader(),\r\n            params: {\r\n                pageNumber: pagenumber,\r\n                pageSize: pageSize,\r\n                searchKey: searchKey\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst disableOrEnableUser = (userId) => {\r\n    return axios.delete(\r\n        API_BASE_URL + \"/user/disable\",\r\n        {\r\n            headers: AuthService.authHeader(),\r\n            params: {\r\n                userId: userId\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst getAllcategories = () => {\r\n    return axios.get(\r\n        API_BASE_URL + '/category/getAll', \r\n        {\r\n            headers: AuthService.authHeader()\r\n        }\r\n    )\r\n}\r\n\r\nconst addNewcategory = (categoryName, transactionTypeId) => {\r\n    return axios.post(\r\n        API_BASE_URL + '/category/new', \r\n        {\r\n            categoryName: categoryName,\r\n            transactionTypeId: transactionTypeId\r\n        },\r\n        {\r\n            headers: AuthService.authHeader()\r\n        }\r\n    )\r\n}\r\n\r\nconst updatecategory = (categoryId, categoryName, transactionTypeId) => {\r\n    return axios.put(\r\n        API_BASE_URL + '/category/update', \r\n        {\r\n            categoryName: categoryName,\r\n            transactionTypeId: transactionTypeId\r\n        },\r\n        {\r\n            headers: AuthService.authHeader(),\r\n            params: {\r\n                categoryId: categoryId\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst disableOrEnableCategory = (categoryId) => {\r\n    return axios.delete(\r\n        API_BASE_URL + \"/category/delete\",\r\n        {\r\n            headers: AuthService.authHeader(),\r\n            params: {\r\n                categoryId: categoryId\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst AdminService = {\r\n    getAllTransactions,\r\n    getAllUsers,\r\n    disableOrEnableUser,\r\n    getAllcategories,\r\n    addNewcategory,\r\n    updatecategory,\r\n    disableOrEnableCategory,\r\n}\r\n\r\nexport default AdminService;"],"names":["memo","_ref","info","onPrevClick","onNextClick","pageNumber","noOfPages","_jsxs","className","children","_jsx","onClick","class","onChange","placeholder","type","e","target","value","initialSortField","arguments","length","undefined","setPageNumber","useState","setNoOfPages","noOfRecords","setNoOfRecords","sortField","setSortField","sortDirec","setSortDirec","searchKey","setSearchKey","pageSize","getPageInfo","end","String","data","setData","isFetching","setIsFetching","usePagination","useEffect","async","AdminService","getAllTransactions","then","response","status","totalNoOfPages","totalNoOfRecords","error","toast","getTransactions","Container","activeNavId","Header","title","Toaster","Loading","_Fragment","Search","val","PageInfo","Info","text","TransactionsTableHeader","TransactionsTableBody","map","item","transactionId","padStart","userEmail","description","transactionType","amount","categoryName","Date","date","toLocaleDateString","year","month","day","pagenumber","axios","get","API_BASE_URL","headers","AuthService","authHeader","params","getAllUsers","disableOrEnableUser","userId","delete","getAllcategories","addNewcategory","transactionTypeId","post","updatecategory","categoryId","put","disableOrEnableCategory"],"sourceRoot":""}